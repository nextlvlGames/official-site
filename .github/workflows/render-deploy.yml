name: Deploy to Render

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Updated to Node.js 18 for better compatibility

      # Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: ./Official-Site

      # Remove unnecessary polyfill packages
      - name: Remove unnecessary polyfill packages
        run: |
          cd Official-Site
          npm uninstall @esbuild-plugins/node-globals-polyfill @esbuild-plugins/node-modules-polyfill stream-browserify buffer rollup-plugin-node-polyfills

      # Create crypto polyfill
      - name: Create crypto polyfill
        run: |
          cd Official-Site
          mkdir -p node_modules/crypto-browserify
          echo "module.exports = { randomBytes: () => Buffer.from([]), getRandomValues: () => Buffer.from([]) };" > node_modules/crypto-browserify/index.js

      # Build the project
      - name: Build project
        env:
          NODE_OPTIONS: "--no-experimental-fetch --no-warnings"
          VITE_DISABLE_NODE_POLYFILLS: "true"
        run: npm run build
        working-directory: ./Official-Site

      # Deploy to Render using a simple API-based approach
      - name: Deploy to Render
        run: |
          echo "Deploying to Render via API..."
          
          # Set up service properties
          SERVICE_NAME="official-site"
          REPO_URL="https://github.com/nextlvlGames/official-site.git"
          BRANCH="master"
          BUILD_COMMAND="cd Official-Site && npm run build"
          PUBLISH_PATH="Official-Site/dist"
          
          # Check if service exists
          SERVICE_RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services?name=$SERVICE_NAME")
          
          if echo "$SERVICE_RESPONSE" | grep -q "\"name\":\"$SERVICE_NAME\""; then
            echo "Service $SERVICE_NAME exists. Updating..."
            SERVICE_ID=$(echo "$SERVICE_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
            
            # Trigger deploy
            DEPLOY_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              "https://api.render.com/v1/services/$SERVICE_ID/deploys")
            
            echo "Deploy triggered: $DEPLOY_RESPONSE"
          else
            echo "Service $SERVICE_NAME does not exist. Creating..."
            
            # Create service with ownerID
            CREATE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer $RENDER_API_KEY" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"$SERVICE_NAME\",
                \"type\": \"static_site\",
                \"repo\": \"$REPO_URL\",
                \"branch\": \"$BRANCH\",
                \"buildCommand\": \"$BUILD_COMMAND\",
                \"publishPath\": \"$PUBLISH_PATH\",
                \"ownerID\": \"$RENDER_OWNER_ID\"
              }" \
              "https://api.render.com/v1/services")
            
            echo "Service created: $CREATE_RESPONSE"
          fi
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_OWNER_ID: ${{ secrets.RENDER_OWNER_ID }}
          GITHUB_REPOSITORY: ${{ github.repository }}
