name: Deploy to Render

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Install Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: ./Official-Site

      # Create crypto polyfill
      - name: Create crypto polyfill
        run: |
          cd Official-Site
          mkdir -p node_modules/crypto-browserify
          echo "module.exports = { randomBytes: () => Buffer.from([]), getRandomValues: () => Buffer.from([]) };" > node_modules/crypto-browserify/index.js

      # Build the project
      - name: Build project
        env:
          NODE_OPTIONS: "--no-experimental-fetch --no-warnings"
          VITE_DISABLE_NODE_POLYFILLS: "true"
        run: npm run build
        working-directory: ./Official-Site

      # Install Render CLI & jq
      - name: Install Render CLI & jq
        run: |
          curl -fsSL https://cdn.render.com/cli/install.sh | bash
          echo "$HOME/.render" >> $GITHUB_PATH
          sudo apt-get update && sudo apt-get install -y jq

      # Login to Render
      - name: Login to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          render login --api-key $RENDER_API_KEY

      # Deploy or Create and Deploy to Render
      - name: Deploy or Create and Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          SERVICE_NAME="official-site"
          SERVICE_ID=$(render services list --json | jq -r --arg NAME "$SERVICE_NAME" '.[] | select(.service.name == $NAME) | .service.id')

          if [ -z "$SERVICE_ID" ]; then
            echo "Service not found. Creating..."
            render services create static-site \
              --name "$SERVICE_NAME" \
              --region oregon \
              --branch master \
              --build-command "cd Official-Site && npm run build" \
              --static-site-command "cd Official-Site && npm run start" \
              --publish-path "Official-Site/dist"
            SERVICE_ID=$(render services list --json | jq -r --arg NAME "$SERVICE_NAME" '.[] | select(.service.name == $NAME) | .service.id')
          else
            echo "Service exists: $SERVICE_ID"
          fi

          echo "Deploying service ID: $SERVICE_ID"
          render deploy service "$SERVICE_ID" --branch master
          else
            echo "Service exists: $SERVICE_ID"
          fi

          echo "Deploying service ID: $SERVICE_ID"
          render deploy service "$SERVICE_ID" --branch master
